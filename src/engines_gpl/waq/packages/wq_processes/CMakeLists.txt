# Set directory which contains all source files
set(src_path src)

# Set version file variables
set(svn_version_root ${CMAKE_CURRENT_SOURCE_DIR}/../) # Check the SVN revision of WAQ directory
set(waq_root_path ${CMAKE_CURRENT_SOURCE_DIR}/../../) # Trace back to the WAQ path

# Set version file variables
set(waq_version_path ${waq_root_path}/version)
set(fortran_version_file_delwaq ${waq_root_path}/packages/waq_utils_f/src/waq_utils/delwaq_version.F90)
set(rc_version_file ${CMAKE_CURRENT_SOURCE_DIR}/../../version/version_number.rc)
set(version_include_dir ${CMAKE_SOURCE_DIR}/../version_includes)



# Gather source files
get_fortran_source_files(${src_path} source)

# Define library
set(library_name wq_processes)
add_library(${library_name} ${source}
                            ${rc_version_file})


# Define additional compilation flags
set_source_files_properties(${fortran_version_file}
                            PROPERTIES COMPILE_OPTIONS "${file_preprocessor_flag}")


# Set dependencies
set(oss_dependencies_general deltares_common
                             waq_process
                             waq_utils_c
                             waq_utils_f)

if (UNIX)
    # the `pkg_check_modules` function is created with this call
    find_package(PkgConfig REQUIRED)

    # these calls create special `PkgConfig::<MODULE>` variables
    pkg_check_modules(NETCDF     REQUIRED IMPORTED_TARGET netcdf)
    pkg_check_modules(NETCDF_FTN REQUIRED IMPORTED_TARGET netcdf-fortran)

    set(oss_dependencies ${oss_dependencies_general})

    target_link_libraries(${library_name}
         ${oss_dependencies}
         PkgConfig::NETCDF
         PkgConfig::NETCDF_FTN)
endif(UNIX)
if (WIN32)
    set(oss_dependencies ${oss_dependencies_general}
                         netcdf4
                         netcdff)
endif(WIN32)

oss_include_libraries(${library_name} oss_dependencies)

# Set additional compilation properties
target_compile_options(${library_name} PRIVATE "${waq_default_flags}")
target_include_directories(${library_name}  PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/../../include ${version_include_dir})

# Define how the files should be structured in Visual studio
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES  ${source})
set_target_properties (${library_name} PROPERTIES FOLDER engines_gpl/waq)

